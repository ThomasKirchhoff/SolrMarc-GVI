#summary This page will guide you through installing and building SolrMarc
#labels Phase-Deploy
<wiki:toc max_depth="5" />

=== About This Guide ===

This getting started guide describes !SolrMarc, defines its software dependencies, steps the user through configuring and building the importer program, and gives basic information about some helpful scripts that are included in the !SolrMarc program’s tools.

=== About !SolrMarc ===

!SolrMarc is a utility that reads in MaRC records from a file, extracts information from various fields as specified in an indexing configuration script, and adds that information to a specified Apache Solr index.

!SolrMarc provides a rich set of techniques for mapping the tags, fields, and subfields contained in the MARC record to the fields you wish to include in your Solr index record, but it also allows the creation of custom indexing functions if you cannot achieve what you require using the predefined mapping techniques.

Currently, !SolrMarc is configured to work with:
  * Blacklight (http://projectblacklight.org/) -- see !SolrMarc BlacklightHowTo 
  * !VuFind (http://vufind.org/) -- see !SolrMarc VufindHowTo

If you do not anticipate a need for writing your own custom indexing functions, the binary distribution of !SolrMarc is a simpler option. The binary distribution consists of a single large jar file containing all of the code, libraries and data files to configure and run !SolrMarc. 

For information on using binary distributions, see SolrMarcBinaryDistribution

To get the binary distribution, go to [http://code.google.com/p/solrmarc/downloads/list this project's downloads page] and download one of:  
  * {{{Binary_Generic_Blacklight_SolrMarc_Unix.tar.gz}}}
  * {{{Binary_Generic_VuFind_SolrMarc_Unix.tar.gz}}}
  * {{{Binary_Generic_VuFind_SolrMarc_PC.tar.gz}}} 
  * {{{Binary_Generic_Blacklight_SolrMarc_PC.tar.gz}}}

<br />
== Software Dependencies ==

!SolrMarc requires the java development kit (JDK) version 1.5 or newer and ant version 1.7 or newer.

==== Java ====

To check the version of the java development kit (JDK), at the command prompt type

   _javac -version_

To download the proper version of the java development kit, go to http://java.sun.com/javase/downloads/index.jsp

==== Solr ====

While !SolrMarc can build a Solr index on its own, you probably already have Solr installed on your system. If not, you will want to install Solr. !SolrMarc 2.0 has been tested with 1.2, 1.3, and several versions of 1.4 (still in beta).

To download Solr, go to http://lucene.apache.org/solr/

==== Ant ====

To check the ant version, at the command prompt type

   _ant -version_

To download the proper version of ant, go to http://ant.apache.org/

==== Subversion Client ====

You will need a subversion client to get !SolrMarc if you're not using a [http://code.google.com/p/solrmarc/wiki/SolrMarcBinaryDistribution binary distribution].

For information about Subversion, go to http://subversion.tigris.org/.  It has information about a variety of subversion clients.

<br />
=== Get !SolrMarc 2.0 ===

Download the !SolrMarc software via a subversion checkout:

   _svn checkout http://solrmarc.googlecode.com/svn/trunk solrmarc_

<br />
== Configuring the Importer Program ==

The default ant target will build the whole program and will query the user for correct settings, but we suggest you do the initialization step separately from the build step. 

From the top level directory of the checked out !SolrMarc software, run the command 

   _ant init_

=== Installation Questions ===

Default answers are shown in square brackets by the ant script.

*_1. Enter the name of directory to contain all site specific files,_* including the configuration files and indexing code.

   e.g. test, demo, uva

*_2. Enter the name of example configuration to start from:_* (!GenericVuFind, !GenericBlacklight, !UvaBlacklight, !StanfordBlacklight, !StanfordVuFind, none)

Choose an example implementation you wish you use as a template for your !SolrMarc installation.  The default is _none_, meaning you will start from a blank slate, without any site-specific files or code (except for properties files required to run !SolrMarc).

The selected example is used as a template to create the directory structure that will be populated by the rest of the configuration script.

*need explanations of what the example installations are tuned for to help folks choose*

*_3. Enter the name of the Jar file to contain site-specific custom indexing code_*

Enter _"none"_ if you expect not to have any site-specific custom indexing code. If you require custom indexing functions beyond what is provided, enter a name for the jar file that will contain your site-specific code.  Omit _".jar"_ from the end of the name.

   e.g. demo, uvaCustom

_"Custom"_ is the default value.

*_4. Enter prefix for site-specific config and index properties file names._*

Enter the prefix to be used to identify this instance of !SolrMarc.

   e.g. for uva_config.properties and uva_index.properties, enter _"uva"_

_"demo"_ is the default value.

Because it is sometimes useful to have multiple site-specific configurations of !SolrMarc, the prefix helps distinguish the configuration files for each site-specific instance.

*_5. Enter name of the final resulting Jar file that will contain all needed code, libraries, and properties for running !SolrMarc._*  

Omit _".jar"_ from the end of the name.

Default value will be (yourPrefix)_!SolrMarc.jar

*_6. Enter java heap size to use in generated scripts for site-specific !SolrMarc indexer._*

Default value is _512MB_.  While 512MB is sufficient to load a small amount of data (think demo), a real-world indexing job requires a much larger java heap size. The developer uses 1024MB on his desktop and at least 2048MB on the server where the indexing job will include millions of records.

The value specified here is preserved in a file for future updates.

*_7. Enter URL of your Solr server_*

   e.g. http://your.host.org:8983/solr

_"http://localhost:8983/solr"_ is the default value.

*_8. Enter the full path of Solr home directory._*

This directory should contain a _conf_ directory which contains _schema.xml_ and _solrconfig.xml_ Solr configuration files.

   e.g. c:\solr\solr, /usr/local/me/solr

*_9. Enter encoding of MARC records:_* MARC8, UNIMARC, UTF8, BESTGUESS

_MARC8_ - Longstanding standard encoding scheme used by U.S. libraries<br />
_UNIMARC_ - Encoding scheme used by many European libraries<br />
_UTF8_ - Unicode character encoding scheme, used in some newer systems<br />
_BESTGUESS_ - You want the program to try to determine the encoding

*_10. Enter the instance of Solr code to use for your site:_* war, 1.2, 1.3, 1.4, external

_war_ - a particular solr.war file used by the web server hosting your solr application.  You will then be prompted for the full path of the location of the solr.war file, e.g. c:\solr\webapps\solr.war, /usr/local/me/jetty/webapps/solr.war<br />

_1.2_ - a distribution of Solr version 1.2 included in !SolrMarc project<br />
_1.3_ - a distribution of Solr version 1.3 included in !SolrMarc project<br />
_1.4_ - a distribution of Solr version 1.4 included in !SolrMarc project<br />

_external_ - like war, but also allows for a directory containing Solr jar files. You will then be prompted for the full path of the location of the solr.war file, or the full path of the directory containing the Solr jar files.

Be careful!  It can cause problems if you create a Solr index with different Solr code than that used by the Solr application on your web server.  Best practice is to specify _“war”_ (or _"external"_), and then give the full path to the solr.war file used by the web server hosting your Solr application. 

!SolrMarc has been tested with Solr 1.2, 1.3, and several versions of 1.4 (still in beta)

<br />
=== Configuration Files ===

You may need to edit the _"xxxx_config.properties"_ and _"xxxx_index.properties"_ files present in your site-specific directory (as created by _ant init_).

 xxx_config.properties: controls overall operation of the program, and may be okay as is.

 xxx_index.properties: where the mapping from MARC fields/subfields to SOLR fields is specified.

Detailed documentation about settings in these files is available at ConfiguringSolrMarc


===== Example xxx_config.properties File =====

{{{
# Properties for the Java import program
# $Id: importSamples.properties 17 2008-06-20 14:40:13Z marc.solr $

# Path to your solr instance
solr.path = /usr/local/projects/bl-demo/bl-demo/jetty/solr
solr.indexer = org.solrmarc.index.SolrIndexer
solr.indexer.properties = demo_index.properties

#optional URL of running solr search engine to cause updates to be recognized.
solr.hosturl = http://localhost:8983/solr/update

# Path to your marc file
marc.to_utf_8 = true
marc.permissive = true
marc.default_encoding = MARC8
marc.include_errors = true 
}}}

===== Example xxx_index.properties File =====

{{{
id = 001, first
title_t = custom, removeTrailingPunct(245a)
sub_title_t = custom, removeTrailingPunct(245b)
alt_titles_t = custom, removeTrailingPunct(240b:700t:710t:711t:440a:490a:505a:830a)
title_added_entry_t = custom, removeTrailingPunct(700t)

author_t = custom, removeTrailingPunct(110a:111a:130a:700a:710a:711a)
published_t = custom, removeTrailingPunct(260a)
isbn_t = 020a, (pattern_map.isbn_clean)
material_type_t = custom, removeTrailingPunct(300a)
subject_t = custom, removeTrailingPunct(600a:610a:611a:630a:650a:651a:655a:690a)
subject_era_facet = custom, removeTrailingPunct(650d:650y:651y:655y)
geographic_subject_facet = custom, removeTrailingPunct(650z:651a)
language_facet = 008[35-37]:041a:041d, language_map.properties
marc_display = FullRecordAsText

format_facet = 007[0-1]:000[6-7]:000[6], (map.format), first
format_code_t = 007[0-1]:000[6-7]:000[6], (map.format_code), first

map.format.vf = Video
map.format.vd = Video
map.format.vb = Video
map.format.as = Serials
map.format.ab = Serials
map.format.a = Book
map.format.t = Book
map.format.m = Computer File
map.format.c = Musical Score
map.format.d = Musical Score
map.format.j = Musical Recording
map.format.i = Non-musical Recording
map.format = Unknown

map.format_code.vf = video
map.format_code.vd = video
map.format_code.vb = video
map.format_code.as = serials
map.format_code.ab = serials
map.format_code.a = book
map.format_code.t = book
map.format_code.m = computer_file
map.format_code.c = musical_score
map.format_code.d = musical_score
map.format_code.j = musical_recording
map.format_code.i = non_musical_recording
map.format_code = unknown

pattern_map.isbn_clean.pattern_0 = ([- 0-9]*[0-9]).*=>$1
}}}

<br />
== Building the Importer Program ==

Once you have finished editing the xxx_config.properties file and the xxx_index.properties file located in your site specific directory, 

 # Change back to the top level directory where you first ran _ant init_
 # Run _ant build_   

This action compiles all of the standard source code for the importer, compiles any custom source code that you have created in your site specific directory, and creates a single jar file containing all of the compiled code, any jar files needed by the compiled code, and the properties files that control how the program runs, including your _xxx_config.properties_, and your _xxx_index.properties_.  

A directory called {{{.dist/}}} is created by the build process. The ant build places the single jar file containing everything !SolrMarc needs to run in this directory.   Additionally, several shell scripts/batch files that make using the indexing program and its associated utilities much easier to run are placed in this {{{.dist/}}} directory.

Assuming no errors are encountered in the build process, the build is now complete.

For documentation on using !SolrMarc to index your marc records, please see the ConfiguringSolrMarc document.

<br />
=== Batch Files/Shell Scripts ===

*filterrecords:* could be called “marcgrep,” selects only those records that contain certain fields or certain values in certain fields. The user specifies the pattern they are seeking in the file on the command line.
  * cat /path/to/big/marcfile.mrc | filterrecords '245a/Jefferson' -- gets the records in the file that have 245 field with subfield a containing "Jefferson"

*getfromsolr:* extracts complete MARC records from Solr index documents.
  * getfromsolr http://myremotemachine:8080/solr id_to_extract
  * getfromsolr xxxx_config.properties id_to_extract -- retrieves record from marc_display field of the solr document.

*getrecord:* extracts specific record(s) from a larger file of MARC records
  * getrecord /path/to/big/marcfile.mrc id_to_extract
  * getrecord /path/to/big/marcfile.mrc first_id_to_extract last_id_to_extract
  * getrecord /path/to/big/marcfile.mrc file_with_list_of_ids.txt

*indexfile:* indexes file of MARC records, adding all data from those records to the Solr index.

*indextest:* processes the file of MARC records and displays to the screen what will be sent to Solr for the records in the file. 

*indextest2:* processes the file of MARC records more fully than {{{indextest}}} and displays to the screen what will be sent to Solr for each record in the file.

*optimizesolr:* optimizes the solr index to be a single segment.

*printrecord:* looks at the MARC records and transforms them into human-readable format. The user specifies the name of the MARC file, and the script prints all records to the screen. This script is helpful in troubleshooting indexing operations, and for selecting tags/fields/subfields for mapping.

*setsolrhome:* extracts the settings for where the Solr server is running and where the Solr files are to be found from the config file and 

   if issued _without_ parameters: displays them<br />
   if issued _with_ parameters: sets them

*setsolrwar:*  if the location of the Solr war file was declared to be “external” during the Solrmarc build (or if you're using a pre-built binary version of Solrmarc), you must use this script to specify where  Solr's Jar files are located. You may specify either a directory containing the Jar files, or the war file that is used by the webserver.

*showconfig:* finds the config file it will be using and displays it onscreen.

*updatesolrserver:* sends a commit message to the URL where solr is running to update a running instance with new index data.