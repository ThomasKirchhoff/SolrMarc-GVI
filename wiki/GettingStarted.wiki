#summary This page will guide you through installing and building SolrMarc
#labels Phase-Deploy
<wiki:toc max_depth="5" />

=== About This Guide ===

This getting started guide describes SolrMarc, defines its software dependencies, steps the user through configuring and building the importer program, and gives basic information about some helpful scripts that are included in the SolrMarc program’s tools.

<br />
=== About !SolrMarc ===

SolrMarc is a utility that reads in MARC records from a file, extracts information from various fields as specified in an indexing configuration script, and adds that information to a specified SOLR index.

SolrMarc provides a rich set of techniques for mapping the tags, fields, and subfields contained in the MARC record to the fields you wish to include in your SOLR index record, but it also allows the creation of custom index functions if you cannot achieve what you require using the predefined mapping techniques.

Currently, SolrMarc is configured to work with:
  * [http://blacklightopac.org/ Blacklight]
  * [VufindHowTo Vufind]

<br />
=== Software Dependencies ===

SolrMarc requires the java development kit (JDK) version 1.5 or newer and ant version 1.7 or newer.

==== Java ====

To check the version of the java development kit (JDK), at the command prompt type

   _javac -version_

To download the proper version of the java development kit, go to http://java.sun.com/javase/downloads/index.jsp

==== Ant ====

To check the ant version, at the command prompt type

   _ant -version_

To download the proper version of ant, go to http://ant.apache.org/

==== Solr ====

While SolrMarc can build a Solr index on its own, you probably already have Solr installed on your system. If not, you will want to install Solr. SolrMarc 2.0 has been tested with 1.2, 1.3, and several versions of 1.4 (still in beta).

To download Solr, go to http://lucene.apache.org/solr/

==== !SolrMarc 2.0 ====

Download the software via a subversion checkout:

{{{ svn checkout http://solrmarc.googlecode.com/svn/trunk  solrmarc }}}

<br />
=== Configuring the Importer Program ===

At the command prompt, run 

   _ant init_

By default, ant builds the whole program and will query user for correct settings.

==== Installation Questions ====

*_1.Enter the name of a directory to contain all site specific modifications, including the configuration and index files_*

   ex. test, demo, uva

*_2. Enter the name of example configuration to start from: (GenericVuFind, UvaBlacklight, VanillaBlacklightDemo, StanfordBlacklight, StanfordVuFind, [none])

Define which of the example directories you wish you use as a template for your SolrMarc installation.

Once you've chosen, the builder creates the directory and subdirectories based on this template to prepare the structure to be filled in with rest of setup information.

*_3. Enter the name of the Jar file containing custom indexing functions._*

If you require custom indexing functions, provide the jar file name that contains that code.

   ex. custom.jar

Enter _"none"_ if you expect not to have any custom indexing functions.

*_4. Enter prefix of the properties files for config and index files for custom modifications._*

Enter the name to be used to identify this instance of SolrMarc.

   ex. my_config.properties; my_index.properties

*_5. Enter name of the final resulting Jar file that will contain all the code, libraries, and properties for running SolrMarc._*

   Default suggestion customprefix_solrmarc.jar

*_6. Enter java heap size memory argument to put in generated scripts for site-specific SolrMarc indexer._*

   Default value=256MB

Note: While 256MB is sufficient to load the demo, a real-world indexing job requires a much larger java heap size. The developer uses 1024MB on his desktop and at least 2048MB on the server where the indexing job will include millions of records.

Custom settings are now written out to a file so that they are preserved for future updates.

*_7. Enter URL where solr server will be located.

   ex. http://localhost:8983/solr

*_8. Enter the full path of the Solr home directory. (Note: directory should contain {{{conf}}} directory, containing {{{solrconfig.xml}}} and {{{schema.xml}}}.)

   ex. c:\solr\solr

*_9. Enter encoding used in MARC records to be read in: MARC8, UNIMARC, UTF8, BESTGUESS

MARC8 - Longstanding standard encoding scheme used by U.S. libraries<br />
UNIMARC - Encoding scheme used by many European libraries<br />
UTF8 - Unicode character encoding scheme, used in some newer systems<br />
BESTGUESS - You have no idea what encoding your records are in and want the program to try to determine it.

*_10.Enter the version of SOLR you will be running in your local environment._*

(SolrMarc has been tested with 1.2, 1.3, and several versions of 1.4(still in beta))

Best practice is to specify _“war”_ as the answer to this question, and then give the full path to the current solr.war file which will be used by the jetty or tomcat web server for searching the solr index. This will ensure that you won’t create an index that is out of sync with what the webserver code expects.

*_11. Enter full path where solr.war file is located.

   ex. c:\solr\webapps\solr.war

<br />
==== Configuration files: ====

Fill in the xxxx_config and xxxx_index files in the site specific directory that you've just created using the template files that were created in the build.

 xxxx_config.properties: controls overall operation of the program

 xxxx_index.properties: where the mapping from MARC tags to SOLR fields is specified

Because it is possible to have multiple instances of SolrMarc running on a server, the prefix helps the system administrator know to which instance the configuration files refer.

===== Config file =====

{{{
# Properties for the Java import program
# $Id: importSamples.properties 17 2008-06-20 14:40:13Z wayne.graham $

# Path to your solr instance
solr.path = /usr/local/projects/bl-demo/bl-demo/jetty/solr
solr.indexer = org.solrmarc.index.SolrIndexer
solr.indexer.properties = demo_index.properties

#optional URL of running solr search engine to cause updates to be recognized.
solr.hosturl = http://localhost:8983/solr/update

# Path to your marc file
marc.to_utf_8 = true
marc.permissive = true
marc.default_encoding = MARC8
marc.include_errors = true 
}}}

===== Index file =====

{{{
id = 001, first
title_t = custom, removeTrailingPunct(245a)
sub_title_t = custom, removeTrailingPunct(245b)
alt_titles_t = custom, removeTrailingPunct(240b:700t:710t:711t:440a:490a:505a:830a)
title_added_entry_t = custom, removeTrailingPunct(700t)

author_t = custom, removeTrailingPunct(110a:111a:130a:700a:710a:711a)
published_t = custom, removeTrailingPunct(260a)
isbn_t = 020a, (pattern_map.isbn_clean)
material_type_t = custom, removeTrailingPunct(300a)
subject_t = custom, removeTrailingPunct(600a:610a:611a:630a:650a:651a:655a:690a)
subject_era_facet = custom, removeTrailingPunct(650d:650y:651y:655y)
geographic_subject_facet = custom, removeTrailingPunct(650z:651a)
language_facet = 008[35-37]:041a:041d, language_map.properties
marc_display = FullRecordAsText

format_facet = 007[0-1]:000[6-7]:000[6], (map.format), first
format_code_t = 007[0-1]:000[6-7]:000[6], (map.format_code), first

map.format.vf = Video
map.format.vd = Video
map.format.vb = Video
map.format.as = Serials
map.format.ab = Serials
map.format.a = Book
map.format.t = Book
map.format.m = Computer File
map.format.c = Musical Score
map.format.d = Musical Score
map.format.j = Musical Recording
map.format.i = Non-musical Recording
map.format = Unknown

map.format_code.vf = video
map.format_code.vd = video
map.format_code.vb = video
map.format_code.as = serials
map.format_code.ab = serials
map.format_code.a = book
map.format_code.t = book
map.format_code.m = computer_file
map.format_code.c = musical_score
map.format_code.d = musical_score
map.format_code.j = musical_recording
map.format_code.i = non_musical_recording
map.format_code = unknown

pattern_map.isbn_clean.pattern_0 = ([- 0-9]*[0-9]).*=>$1
}}}

<br />
=== Building the Importer Program ===

Once you have finished editing the xxxx_config.properties file and the xxxx_index.properties file located in your site specific directory, 

 # Change back to the top level directory where you first ran _ant init_
 # Run _ant build_   

This action compiles all of the standard source code for the importer, compiles any custom source code that you have created in your site specific directory, and creates a large jar file containing all of the compiled code, any jar files needed by the code, and the properties files that control how the program runs, including your xxxx_ config.properties, and your  xxxx_index.properties.  

A directory called {{{.dist/}}} is created by the build process. The builder places the jar file that contains all the code and libraries for SolrMarc to run in this directory.   Additionally, several shell scripts/batch files that make using the indexing program and its associated utilities much easier to run are placed in this {{{.dist/}}} directory.

Assuming no errors are encountered in the build process, the build is now complete.

For documentation on using SolrMarc to index your marc records, please see the ConfiguringSolrMarc document.

<br />
=== Batch Files/Shell Scripts ===

*filterrecords:* could be called “marcgrep,” selects only those records that contain certain fields or certain values in certain fields. The user specifies the pattern they are seeking in the file on the command line.

*getfromsolr:* 

*getrecord:* extracts a record from a MARC file, matching a record id specified by user.

*indexfile:* indexes file of MARC records, adding all data from those records to the Solr index.

*indextest:* processes the file of MARC records and displays to the screen what it will be sending  to SOLR for the records in the file.

*indextest2:*

*optimizesolr:* optimizes the solr index to be a single segment.

*printrecord:* looks at the MARC records and transforms them into human-readable format. The user specifies the name of the MARC file, and the script prints all records to the screen. This script is helpful in troubleshooting indexing operations, and for selecting tags/fields/subfields for mapping.

*setsolrhome:* extracts the settings for where the Solr server is running and where the Solr files are to be found from the config file and 

   if issued _without_ parameters: displays them

   if issued _with_ parameters: sets them

*setsolrwar:*  if the location of the Solr war file was declared to be “external” during the Solrmarc build (or if you're using a pre-built binary version of Solrmarc), you must use this script to specify where  Solr's Jar files are located. You may specify either a directory containing the Jar files, or the war file that is used by the webserver.

*showconfig:* finds the config file it will be using and displays it onscreen.

*updatesolrserver:* sends a commit message to the URL where solr is running to update a running instance with new index data.