#summary Running and Writing Tests for SolrMarc code.


This page will show you some ways to use existing tests and how to write your own tests for your site specific version of Blacklight.

We recommend a Test-First Development approach:  

  # write a test for what you would like to have happen. (e.g. what value you would like a Solr field to get when you index particular MARC data.
  # run the test - it should fail.  If you will be using any customizations, (e.g. new mappings in your xxx_index.properties file, or your own custom methods), then the test should fail.  
    * If the test doesn't fail, you should make sure it *will* fail if the data/result pairing is incorrect -- you don't want any false positives in your tests!
  # manipulate configurations and customized methods as needed until the test passes.
  # passing test - Yay!

For more on test first development ...


= Introduction =

!SolrMarc comes with two different testing infrastructures.  Both test whether the mappings from a MARC record to the intended contents of a Solr field are correct.  (Testing whether searching on Solr field contents returns the expected results is planned for some future date.  Stanford has some code for this, but it does not yet work for the generalized case.)

== Method I:  Tests in .txt File (Run from ant Task) ==

This approach may be more convenient when your site's customizations are all done in the xxx_index.properties configuration file.  This approach may also be more convenient if you intend to have single MARC records in your test files.  (Note: !SolrMarc provides scripts to extract individual MARC records from files containing multiple MARC records, as well as from Solr directly.  See the "Batch File / Shell Scripts" section at the bottom of the GettingStarted wiki page.)  This approach will be less convenient when there are many values to be assigned to a particular solr field (e.g. a record with a lot of 650 subject fields).

  * When you run these tests with the provided ant task, a full build of your code is always performed before the tests are run.
  * These test do NOT indicate _which_ Solr document will be checked, so it is recommended that you use test files with a single MARC record for each test.
  * These tests require ALL the values for a field to be specified, in order.
  * These tests ONLY check for particular value(s) in a field.  They do not check to ensure a value is NOT present, or that the field is not present, etc.

The tests and expected results are in a file called indextest.txt that lives in your site's test/data folder.  The tests are run via an ant target "test" which looks for the indextest.txt file in your site's test/data directory.

Steps:

  # Configure the SolrMarc program for your site.  (See GettingStarted)
  # Make sure you have known MaRC records in your created test/data folder.
    # you can use any of the test data provided in the !SolrMarc project, or provide your own.
  # Create an indextest.txt file in your test folder.  Each test is a line in the file; for an example, see !UvaBlacklight/test/data/indextest.txt.
    
    # each line looks for a value in a field in a Solr document that would be created by indexing the specified MARC data. 
    # format of each line:
      # name of your site's xxx_config.properties file
      # name of the file containing MARC test data (relative to your site's !SolrMarc folder).  It is recommended that you use test files with a single MARC record for each test
      # name of the Solr field to test
      # value expected for the Solr field
          * example: {{{demo_config.properties, 00282214.mrc, title_t, Shodede-yam Yehudiyim}}}
        * for an array, list the values separated by a vertical bar.  Order matters.
          * example: {{{demo_config.properties, 2009373513.mrc, title_t, Ci an zhou bian /|次按驟變}}}

  # Run the tests with the ant "test" target. Two ways you can do this:
    * From the command line, from the top level directory of the !SolrMarc project, type
      {{{ant test}}}
       * Note: the site.dir.properties file at the top level directory is how this ant task knows where to find YOUR test file.  It must be in your site's test/data directory.
    * From your IDE, run the ant test target in the top level build.xml ant file. 

The JUnit code that is used for these tests is org.solrmarc.test.!ParameterizedIndexTest, written by Bob Haschart.

== Method II: Tests in Java Code (Can Run within Your IDE) ==

These tests are "closer" to the java code, so if you are writing customized java methods for indexing, this approach may be more convenient.  This approach may also be more convenient if you intend to have multiple MaRC records in your test files.  This approach allows checking for the presence or absence of a single value for a solr field, so it may be more convenient when there are many values to be assigned to a particular solr field (e.g. a record with a lot of 650 subject fields).


It allows tests to be run from Eclipse or other IDEs.  Because it is just java code, it can also be run from an ant task.  
  * The tests and expected results are in the java code.
  * When you run these tests, a full build of your code will not happen (unless you configure your IDE for a full build before you run JUnit tests).
  * These tests indicate which Solr document is to be tested, so you can use a test data file with multiple MaRC records. 
  * These tests allow any individual value for a field to be specified, without having to specify all the other values.
  * These tests can check for the absence of a value from a Solr field.

blah blah blah


Naomi Dushay wrote the code for this approach.  